package maps

object maps {
	def main(args: Array[String]) {
		val products = Map(("a", 10), ("b", 20), ("c", 4), ("d", 21))
		val prodWithDiscount = for ((k,v) <- products) yield (k, (10 * v / 100))
		
		for ((k,v) <- prodWithDiscount) Console.printf("prodkey:%s : prodval: %d \n", k, v)
	}
}

object maps2 {
	def main(args: Array[String]) {
		val numbers = Array(1,5,2,6,3,74,23)
		
		Console.printf("minmax is %s: ",minmax(numbers))
		
		lteqgt(numbers, 6)
	}
	
	def minmax(values: Array[Int]) : Map[Int, Int] = {
	  val sorted = values.sortWith(_ < _)	  
	  Map((sorted(0), sorted(sorted.length -1)))
	}	
	
	def lteqgt(values: Array[Int], v: Int) {
	  val less = for (i <- 0 until values.length-1 if v < values(i) ) yield (v+1) 
	  
	  Console.printf(less)
	}
}